using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace CalculatorForm
{
    public partial class SimpleCalculator : Form
    {
        //The variables for the first, second, and result numbers
        double firstNumber, secondNumber, result;
        List<double> resultHistory = new List<double>(); //Stores results from past calculations
        bool continueCalculating = true; //Control variable for the loop

        //Function to initialize the form and its components
        public SimpleCalculator()
        {
            InitializeComponent();
            
        }

        private void generateRandom_Click(object sender, EventArgs e)
        {
            int[] randomNumbers = new int[2]; //Array to hold 5 random numbers
            Random rand = new Random();       //Random number generator
            string result = "Your numbers are:\n";

            for (int i = 0; i < randomNumbers.Length; i++)
            {
                randomNumbers[i] = rand.Next(1, 101); //Gets a random number from 1â€“100
                result += randomNumbers[i] + "\n";
            }

            MessageBox.Show(result, "Random Number Generator");
        }

        //The Event handler for the Add button. This function will be called when the "+" is clicked.
        private void button4_Click(object sender, EventArgs e)
        {
            //Validate the input to ensure both text boxes contain numbers
            if (ValidateInput())
            {
                //Perform addition if the input is valid
                result = firstNumber + secondNumber;
                //Display the result in a pop-up MessageBox
                MessageBox.Show("Sum: " + result.ToString());

                resultHistory.Add(result); //Saves the current result to the history
            }
        }

        //The Event handler for the Subtract button. This function will be called when the "-" is clicked.
        private void button3_Click(object sender, EventArgs e)
        {
            //Validate the input to ensure both text boxes contain numbers
            if (ValidateInput())
            {
                //Perform subtraction if the input is valid
                result = firstNumber - secondNumber;
                //Display the result in a pop-up MessageBox
                MessageBox.Show("Difference: " + result.ToString());

                resultHistory.Add(result);
            }
        }

        //The Event handler for the Multiplication button. This function will be called when the "*" is clicked.
        private void button2_Click(object sender, EventArgs e)
        {
            //Validate the input to ensure both text boxes contain numbers
            if (ValidateInput())
            {
                //Perform multiplication if the input is valid
                result = firstNumber * secondNumber;
                //Display the result in a pop-up MessageBox
                MessageBox.Show("Product: " + result.ToString());

                resultHistory.Add(result);
            }
        }

        //The Event handler for the Division button. This function will be called when the "/" is clicked.
        private void button1_Click_1(object sender, EventArgs e)
        {
            //Validate the input to ensure both text boxes contain numbers
            if (ValidateInput())
            {
                try
                {
                    if (secondNumber == 0) //Check for zero in the denominator during division
                    {
                        throw new DivideByZeroException("Hey! That's illegal!"); //Throws a new exception when zero is in the denominator
                    }
                    result = firstNumber / secondNumber;
                    //Display the result
                    MessageBox.Show("Quotient: " + result.ToString());
                    resultHistory.Add(result);
                }
                catch (DivideByZeroException ex) 
                {
                    //Display the error in a message box
                    MessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
        }

        //The handler for the Power (^) button. This function calculates exponents. 
        private void Power_Click(object sender, EventArgs e)
        {
            if (ValidateInput())
            {
                double powerResult = 1; //Create result variable
                for (int i = 0; i < (int)secondNumber; i++) //"For" loop to calculate powers
                {
                    powerResult *= firstNumber; //Multiplies the base by itself
                    //Display the result of the exponent calculation
                    MessageBox.Show(firstNumber + " to the power of " + secondNumber + " is: " + powerResult);

                    resultHistory.Add(result);
                }               
                
            }
        }

        //Validate the input to ensure both text boxes contain numbers
        private bool ValidateInput()
        {
            try
            {
                //Try to parse the text entered in textBox1 and textBox2 as double values
                if (!double.TryParse(textBox1.Text, out firstNumber) || !double.TryParse(textBox2.Text, out secondNumber))
                {
                    throw new FormatException("We can only afford numbers. :)");

                }
                return true; //Return true if input is valid
            }
            catch (FormatException ex)
            {
                //Display error message if input is invalid
                MessageBox.Show(ex.Message, "Input Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false; //Return false if input returns invalid
            }
            
        }

        //The event handler for the "History" button
        private void History_Click(object sender, EventArgs e)
        {
            //Checks if there are any results in the history list.
            if (resultHistory.Count == 0)
            {
                MessageBox.Show("There's nothing here, go do some math :)");
                return;
            }

            //Converts the history list to an array
            double[] historyArray = resultHistory.ToArray();

            //Message that will display the history
            string historyMessage = "Previous Calculations:\n";

            //Loops through the array for each result
            for (int i = 0; i < historyArray.Length; i++)
            {
                //Adds each result to the message
                historyMessage += $"{i + 1}. {historyArray[i]}\n";
            }

            //Shows all the results in a MessageBox titled "Calculation History".
            MessageBox.Show(historyMessage, "Calculation History");
        }

        //The Event handler for any text changes in textBox2
        private void textBox2_TextChanged(object sender, EventArgs e)
        {

        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }



        //The Event handler for any text changes in textBox1
        private void textBox1_TextChanged_1(object sender, EventArgs e)
        {
            //No functionality
        }

        //The Event handler for the Clear button
        private void Clear_Click(object sender, EventArgs e)
        {
            //Clear the contents of both text boxes
            textBox2.Clear();
            textBox1.Clear();
        }
    }
}
